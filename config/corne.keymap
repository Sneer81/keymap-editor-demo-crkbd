/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: reindentMultilineIntegerCells = "dedent"

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings =
        <&kp>,
        <&kp>;
    };
    tapdancing: tapdancing {
      compatible = "zmk,behavior-tap-dance";
      label = "TAPDANCING";
      #binding-cells = <0>;
      tapping-term-ms = <150>;
      bindings =
        <&kp DOUBLE_QUOTES>,
        <&kp APOS>;
    };
  };

  combos {
    compatible = "zmk,combos";

    tab {
      bindings = <&trans>;
      key-positions = <2 3>;
    };

    ctrl {
      bindings = <&kp LCTRL>;
      key-positions = <26 27>;
    };

    cmd {
      bindings = <&kp LCMD>;
      key-positions = <37 38>;
    };

    alt {
      bindings = <&kp LEFT_ALT>;
      key-positions = <39 40>;
    };

    shift {
      bindings = <&kp LSHIFT>;
      key-positions = <8 9>;
    };

    caps_word {
      bindings = <&caps_word>;
      key-positions = <17 18>;
    };

    delete {
      bindings = <&kp DEL>;
      key-positions = <32 33>;
    };
  };

  macros {
    zed_em_kay: zed_em_kay {
      compatible = "zmk,behavior-macro";
      label = "ZM_zed_em_kay";
      #binding-cells = <0>;
      bindings =
        <&macro_press>,
        <&kp LSHFT>,
        <&macro_tap>,
        <&kp Z &kp M &kp K>,
        <&macro_release>,
        <&kp LSHFT>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
&trans  &kp Q  &kp W           &kp F      &kp P          &kp B        &kp J      &kp L      &kp U    &kp Y  &mt ESC SEMICOLON  &trans
&trans  &kp A  &kp R           &kp S      &kp T          &kp G        &kp M      &kp N      &kp E    &kp I              &kp O  &trans
&trans  &kp Z  &kp X           &kp C      &kp D          &kp V        &kp K      &kp H  &kp COMMA  &kp DOT       &kp QUESTION  &trans
                      &lt 1 LEFT_GUI  &kp LSHFT  &kp BACKSPACE    &kp SPACE  &kp ENTER  &lt 2 TAB
      >;
    };

    raise {
      bindings = <
&trans  &trans          &trans          &trans        &kp MINUS         &kp PLUS          &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3        &trans  &trans
&trans  &trans          &trans    &kp UP_ARROW    &kp KP_DIVIDE  &kp KP_MULTIPLY      &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6        &trans  &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW           &trans    &kp KP_EQUAL  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
                                        &trans           &trans           &trans       &kp ENTER        &trans        &trans
      >;
    };

    lower {
      bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET      &kp AMPS  &kp LPAR  &kp RPAR     &kp LESS_THAN     &trans
&trans    &trans  &trans    &trans    &trans     &trans     &kp PIPE  &kp KP_MINUS  &kp LBKT  &kp RBKT  &kp GREATER_THAN  &kp GRAVE
&trans    &trans  &trans    &trans    &trans     &trans    &kp UNDER      &kp PLUS  &kp LBRC  &kp RBRC         &kp SLASH  &kp TILDE
                            &trans    &trans     &trans       &trans        &trans    &trans
      >;
    };

    both {
      bindings = <
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0    &bt BT_SEL 3  &trans  &trans  &trans  &trans    &rgb_ug RGB_COLOR_HSB(0,60,50)
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 1    &bt BT_SEL 4  &trans  &trans  &trans  &trans  &rgb_ug RGB_COLOR_HSB(120,60,50)
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 2      &bt BT_CLR  &trans  &trans  &trans  &trans  &rgb_ug RGB_COLOR_HSB(240,60,50)
                        &trans  &trans        &trans          &trans  &trans  &trans
      >;
    };
  };
};
